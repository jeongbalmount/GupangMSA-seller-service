package GupangMSA.sellerservice.mock;

import GupangMSA.sellerservice.domain.product.SellerProductResponse;
import GupangMSA.sellerservice.domain.product.SellerProductRequest;
import GupangMSA.sellerservice.domain.product.SellerProductUpdate;
import GupangMSA.sellerservice.exception.product.ProductDeleteException;
import GupangMSA.sellerservice.exception.product.ProductUpdateException;
import GupangMSA.sellerservice.infrastructure.SellerProductConnector;
import lombok.RequiredArgsConstructor;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

@RequiredArgsConstructor
public class FakeSellerProductConnector implements SellerProductConnector {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<SellerProductResponse> data = Collections.synchronizedList(new ArrayList<>());


    @Override
    public SellerProductResponse save(SellerProductRequest request) {
        SellerProductResponse newSellerProduct = SellerProductResponse.builder()
                .id(autoGeneratedId.incrementAndGet())
                .sellerId(request.getSellerId())
                .name(request.getName())
                .price(request.getPrice())
                .category(request.getCategory())
                .description(request.getDescription())
                .build();
        data.add(newSellerProduct);
        return newSellerProduct;
    }

    @Override
    public Optional<SellerProductResponse> findById(Long id) {
        return data.stream().filter(item ->
                Objects.equals(item.getId(), id)).findAny();
    }

    @Override
    public List<SellerProductResponse> findBySellerId(Long sellerId) {
        List<SellerProductResponse> sellerProducts = new ArrayList<>();
        for (SellerProductResponse sellerProduct : data) {
            if (Objects.equals(sellerProduct.getSellerId(), sellerId)) {
                sellerProducts.add(sellerProduct);
            }
        }
        return sellerProducts;
    }

    @Override
    public SellerProductResponse update(SellerProductUpdate sellerProductUpdate) {
        Optional<SellerProductResponse> optionalSellerProduct = data.stream().filter(item -> Objects.equals(item.getId(),
                sellerProductUpdate.getId())).findAny();


        SellerProductResponse sellerProduct = optionalSellerProduct.orElseThrow(() ->
                new ProductUpdateException("product update failed"));


        SellerProductResponse updatedProduct = SellerProductResponse.builder()
                .id(sellerProduct.getId())
                .sellerId(sellerProduct.getSellerId())
                .name(sellerProductUpdate.getName())
                .price(sellerProductUpdate.getPrice())
                .category(sellerProduct.getCategory())
                .description(sellerProductUpdate.getDescription())
                .build();

        return updatedProduct;
    }

    @Override
    public void delete(Long productId) {
        Optional<SellerProductResponse> optionalSellerProduct = data.stream().filter(item ->
                Objects.equals(item.getId(), productId)).findAny();

        SellerProductResponse sellerProduct = optionalSellerProduct.orElseThrow(() ->
                new ProductDeleteException("product delete failed"));
        data.remove(sellerProduct);
    }
}
