package GupangMSA.sellerservice.mock;

import GupangMSA.sellerservice.domain.product.SellerProduct;
import GupangMSA.sellerservice.domain.product.SellerProductUpdate;
import GupangMSA.sellerservice.exception.product.ProductDeleteException;
import GupangMSA.sellerservice.exception.product.ProductUpdateException;
import GupangMSA.sellerservice.infrastructure.SellerProductConnector;
import lombok.RequiredArgsConstructor;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

@RequiredArgsConstructor
public class FakeSellerProductConnector implements SellerProductConnector {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<SellerProduct> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public void save(SellerProduct sellerProduct) {
        data.add(sellerProduct);
    }

    @Override
    public List<SellerProduct> findBySellerId(Long sellerId) {
        List<SellerProduct> sellerProducts = new ArrayList<>();
        for (SellerProduct sellerProduct : data) {
            if (Objects.equals(sellerProduct.getSellerId(), sellerId)) {
                sellerProducts.add(sellerProduct);
            }
        }
        return sellerProducts;
    }

    @Override
    public SellerProduct update(SellerProductUpdate sellerProductUpdate) {
        Optional<SellerProduct> optionalSellerProduct = data.stream().filter(item -> Objects.equals(item.getId(),
                sellerProductUpdate.getProductId())).findAny();

        return optionalSellerProduct.orElseThrow(() ->
                new ProductUpdateException("product update failed"));
    }

    @Override
    public void delete(Long productId) {
        Optional<SellerProduct> optionalSellerProduct = data.stream().filter(item ->
                Objects.equals(item.getId(), productId)).findAny();

        optionalSellerProduct.orElseThrow(() -> new ProductDeleteException("product delete failed"));
    }
}
