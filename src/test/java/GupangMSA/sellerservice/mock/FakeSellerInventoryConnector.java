package GupangMSA.sellerservice.mock;

import GupangMSA.sellerservice.domain.inventory.SellerInventory;
import GupangMSA.sellerservice.domain.product.SellerProductResponse;
import GupangMSA.sellerservice.infrastructure.SellerInventoryConnector;
import GupangMSA.sellerservice.infrastructure.SellerProductConnector;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeSellerInventoryConnector implements SellerInventoryConnector {

    private final SellerProductConnector productConnector;
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<SellerInventory> data = Collections.synchronizedList(new ArrayList<>());

    public FakeSellerInventoryConnector(SellerProductConnector productConnector) {
        this.productConnector = productConnector;
        this.init();
    }

    private void init() {
        SellerInventory sellerInventory1 = SellerInventory.builder()
                .productId(1L)
                .count(10)
                .build();
        SellerInventory sellerInventory2 = SellerInventory.builder()
                .productId(1L)
                .count(20)
                .build();
        SellerInventory sellerInventory3 = SellerInventory.builder()
                .productId(2L)
                .count(1000)
                .build();
        data.add(sellerInventory1);
        data.add(sellerInventory2);
        data.add(sellerInventory3);
    }

    /*
        - seller가 등록한 상품들을 가져온 후 해당 상품들의 id에 맞는 inventory 데이터들을 가져온다.
     */
    @Override
    public List<SellerInventory> findBySellerId(Long sellerId) {
        List<SellerInventory> sellerInventories = new ArrayList<>();
        List<SellerProductResponse> sellerProductResponses = productConnector.findBySellerId(sellerId);
        List<Long> productIds = new ArrayList<>();
        for (SellerProductResponse response : sellerProductResponses) {
            productIds.add(response.getId());
        }

        return getSellerInventories(sellerInventories, productIds);
    }

    private List<SellerInventory> getSellerInventories(List<SellerInventory> sellerInventories, List<Long> productIds) {
        for (Long productId : productIds) {
            for (SellerInventory sellerInventory : data) {
                if (Objects.equals(sellerInventory.getProductId(), productId)) {
                    sellerInventories.add(sellerInventory);
                    break;
                }
            }
        }
        return sellerInventories;
    }

    @Override
    public SellerInventory update(SellerInventory sellerInventory) {
        SellerInventory newSellerInventory = SellerInventory.builder()
                .count(sellerInventory.getCount())
                .build();
        return newSellerInventory;
    }
}
