package GupangMSA.sellerservice.mock;

import GupangMSA.sellerservice.domain.Seller;
import GupangMSA.sellerservice.service.port.SellerRepository;
import lombok.extern.slf4j.Slf4j;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeSellerRepository implements SellerRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Seller> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Seller save(Seller seller) {
        if (seller.getId() == null || seller.getId() == 0) {
            Seller newSeller = Seller.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .companyName(seller.getCompanyName())
                    .representative(seller.getRepresentative())
                    .email(seller.getEmail())
                    .password(seller.getPassword())
                    .city(seller.getCity())
                    .street(seller.getStreet())
                    .zipcode(seller.getZipcode())
                    .phoneNumber(seller.getPhoneNumber())
                    .joined(seller.getJoined())
                    .sellerUuid(seller.getSellerUuid())
                    .build();
            data.add(newSeller);
            return newSeller;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), seller.getId()));
            data.add(seller);
            return seller;
        }
    }

    @Override
    public Optional<Seller> findById(Long id) {
        return data.stream().filter(item -> Objects.equals(item.getId(), id)).findAny();
    }
}
